name: todo-ci
run-name: Todo CI
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - '*'

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.18.x
      uses: actions/setup-go@v4
      with:
        go-version: 1.18.x

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: go-fmt
      run: if [-n "$(shell gofmt -s -l .)" ]; then \
		            echo "Go code is not formatted, run 'gofmt -s -w .'"; \
		            exit 1; \
	          fi
      if: matrix.os == 'ubuntu-latest'

    - name: go-vet
      run: go vet ./...

    - name: revive
      run: |
        go install github.com/mgechev/revive@latest
        revive -config ./revive.toml

  test:
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '^1.18.0'
      #- run: go test ./...
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout   
        uses: actions/checkout@v4

      - name: Setup go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.18.0'
          # Get values for cache paths to be used in later steps
          # echo "::set-output name=go-build::$(go env GOCACHE)"
          # echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Set go-cache-path output    
        id: go-cache-paths
        run: |
          echo "go-build = $(go env GOCACHE)">> $GITHUB_OUTPUT
          echo "go-mod = $(go env GOMODCACHE)">> $GITHUB_OUTPUT

      - name: Cache Go modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-go-build-${{ env.cache-name }}-
            ${{ runner.OS }}-go-build-
            ${{ runner.OS }}-  

      - name: build todo   
        run: go build -o todo main.go

      - name: Archive Production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: todo
          path: ./todo
  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch || startsWith(github.ref, 'refs/tags/') }}  
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: todo
          path: ./todo 

      - run: chmod a+x ./todo/todo
      - name: Build and push
        uses: docker/build-push-action@v5
        with: 
          context: .
          push: ${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch || startsWith(github.ref, 'refs/tags/') }}
          tags: nargesbyt/todo:latest
